

字典的比较：dict
首先是字典的大小，然后是键，最后是值。


集合（set）：

比较操作符检查某集合是否是其他集合的超集或子集。< , <=用来判断子集， >, >=用来判断超集。

集合类型操作符：

联合（|）：并集

交集（&）：并集

差补/相对补集（-）：s - t（只属于s，不属于t）

对称差分（^）：s ^ t(只能属于集合s或者集合t的成员，不能同时属于两个集合)

==========================================================================================================================
特殊方法：

如 __init__ 创建对象的时候自动执行   __add__  + 操作符   具有__call__特殊方法的对象都被当做函数

python 一切皆对象  多范式语言



with...as ... 上下文管理

with open('a.txt') as f:
    ....           #you can use f in this line and next line
    ...
f.closed           #ERROR, f is not visible in this line
任何定义了__enter__() 与__exit__()方法的对象都可以上下文管理，在进入时调用enter在跳出作用域就会调用exit

__dict__属性列表
==========================================================================================================================
enumerate()

每次循环中同时得到下标和元素：

S = 'abcdefghijk'
for （index, char） in enumerate(S):
    print index
    print char



字典循环：
dic = {'a':12, 'b':13}
for (k, v) in dic.items():
    print k
    print v


包裹位置传递：

def func(*name):
    print type(name)
    print name


func(1, 4, 6)            #参数被name搜集，合为一个元组
func(5, 6, 7, 1, 2, 3)   #

包裹关键字传递：
def func(**dict):
    print type(dict)
    print dict

func(a = 1, b = 9)
func(m = 2, n = 1, c = 11)    #dict 是一个字典类型的，


解包裹：
def func(a, b, c):
    print a, b, c

m = ('test', 'dsf', 'er')

func(*m)



循环对象，  next（）方法

循环对象是这样一个对象，它包含有一个next()方法(__next__()方法，在python 3x中)， 这个方法的目的是进行到下一个结果，而在结束一系列结果之后，举出StopIteration错误。

生成器
表理解    L = [x**2 for x in range(10)] 动态生成list


lambda x, y: x + y

map()函数
re = map((lambda x: x + 1), [1, 2, 4])
则返回的re为[2, 4, 6]它是将后边的list一次调用前边的函数操作，返回list
可以有多个参数，如
re = map((lambda x, y: x +　y), [1, 4, 6], [2, 5, 8])
则返回re＝［３，　９，　１４］它是对后边的每个list中取一个进行函数操作，因此函数参数个数与list的个数相同。最后返回list

filter()函数
筛选list中的数据,第一个参数依然是函数对象。该函数返回bool值，确定该值是不是满足条件。
如def func(a):
      if a > 100:
         return True
      else:
         return False
print filter(func, [10, 56, 101, 500])。该函数会将满足func的数据筛选出来，


reduce（）函数
reduce返回一个数，函数对象拥有两个参数，是将list中的数字依次传入，将结果作为函数对象的第一个参数，将list的下一个作为第二个参数，继续运算。

如
b = reduce((lambda x, y: x + y), [3, 9, 14])
最终返回26

==============================================================================================================================================================

删除元素，list
l = [0, 1, 2, 3, 4]
for i in l:
    if i != 4:
        l.remove(i)
print l  ----->  [1, 3, 4]
下次i将在什么位置。


删除i后，整个list长度少1，下次就会从被删除元素的下一个的下一个元素开始， 因此，以上循环不可能将数据删完。



li = [i for i in l if i == 4]  =============这种写法再创建一个list

利用filter（）函数：
def func(a):
    if a == 4:
        return True
    else:
        return False          filter(func, l)  ===>这样便会输出[4]


enumerate()与zip()

对list枚举：enumerate()
如： l = ['a', 'b', 'c']
for i, item in enumerate(l):
    print i, j                                  
---- 输出添加索引：
0 ‘a’
1 ‘b’
2 ‘c’    
zip同时输出连个list；
for i, j in zip(l1, l2):
    print i, j

==============================================================================================================================================================

python 文件格式

#!/usr/bin/python


'''module introduction'''

import 
import 


global var

class 

function 

===================================================================================================================================================

装饰器新建了一个可调用对象，装饰器接受一个可调用对象作为输入参数

装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。

接受一个函数参数，返回一个函数，从而加工一个函数


并发，   一个对象的状态就是它的数据。在不可控的并发访问中保护数据。
一个对象是否应该是线程安全的取决于它是否会被多个线程访问。线程中如何使用对象。
只要有多于一个的线程访问给定的状态变量，而且其中某个线程会写入该变量，此时必须使用同步来协调线程对该变量的访问。



一个函数和它的环境变量合在一起，就构成了一个闭包(closure)。     

函数式编程

reduce
========================================================================
python多线程
继承threading.Thread的类，重写run方法，调用start便启动线程

class mythread(threading.Thread): 
    def __init__(self, par...):
        threading.Thread.__init__(self)
        self.                             #局部变量
========================================================================
import time
from datetime import datetiem,timedelta


time.time()   返回时间戳


time.localtime(para)  para为时间戳，返回time.struct_time

time.strftime("format", time.struct_time)   将时间格式转换为string，格式format, 返回string格式的时间

time.strptime("string time", ["format"]) 将string转换为time.struct_time, 返回time.struct_time格式的时间。

time.mktime(time.struct_time)   返回时间戳


datetime.strftime("format") 将datetime格式的时间转换为string

datetime.strptime("string time", "format")  string时间转换为datetime类型，返回datetime

timestamp to string:
time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(timestamp))

时间戳 -----》时间  time.strftime("format", time.localtime(时间戳))  返回时间string

时间 ------》 时间戳  time.mktime(time.strptime("时间"，"format"))  返回时间戳
=========================================================================================================================================================

（1）/etc/profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置。
（2）/etc/bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。
（3）~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。
（4）~/.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。
（5） ~/.bash_logout:当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承 /etc/profile中的变量,他们是"父子"关系。
（6）~/.bash_profile 是交互式、login 方式进入 bash 运行的~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。

shell if 语句，数字比较 -ne不等， 字符串比较是否相等用‘=’，如if [ "$1" = "logserver" ]; 判断输入的第一个参数是否是logserver

